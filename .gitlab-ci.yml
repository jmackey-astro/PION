#image: jmackey12345/testing:latest
image: ciaranorourke/superpion:latest

.snippets:
  - &configure
    mkdir -p "${CMAKE_BUILD_DIR}"
    && pushd "${CMAKE_BUILD_DIR}"
    && (
      set -x;
      cmake
        -DCMAKE_VERBOSE_MAKEFILE="${CMAKE_VERBOSE_MAKEFILE}"
        -DCMAKE_EXPORT_COMPILE_COMMANDS="${CMAKE_EXPORT_COMPILE_COMMANDS}"
        -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}"
        -DCMAKE_CXX_COMPILER=${CXX}
        -DCMAKE_PREFIX_PATH="${CMAKE_PREFIX_PATH}"
        -DPION_NESTED_GRID="${PION_NESTED_GRID}"
        -DPION_UNIFORM_GRID="${PION_UNIFORM_GRID}"
        -DPION_PARALLEL="${PION_PARALLEL}"
        -DPION_USE_SILO="${PION_USE_SILO}"
        -DPION_USE_FITS="${PION_USE_FITS}"
        -DPION_TOOLS="${PION_TOOLS}"
        -DPION_SKIP_SOURCE="${PION_SKIP_SOURCE}"
        -DPION_BUILD_DOCUMENTATION="${PION_BUILD_DOCUMENTATION}"
        -DPION_BUILD_TESTS="${PION_BUILD_TESTS}"
        ..
    )
    && popd
  - &build
    make -C "${CMAKE_BUILD_DIR}" -j "$(getconf _NPROCESSORS_ONLN)"
  - &doc
    make -C "${CMAKE_BUILD_DIR}" doc

.cmake_variables:
  default_cmake_variables: &default_cmake_variables
    CMAKE_EXPORT_COMPILE_COMMANDS: "OFF"
    CMAKE_VERBOSE_MAKEFILE: "OFF"
    CMAKE_BUILD_DIR: "${CI_PROJECT_DIR}/build"
    CMAKE_BUILD_TYPE: Release 
    CXX: g++
    CMAKE_PREFIX_PATH: "/usr/lib/x86_64-linux-gnu"
    PION_NESTED_GRID: "OFF"
    PION_UNIFORM_GRID: "OFF"
    PION_PARALLEL: "ON"
    PION_USE_SILO: "OFF"
    PION_USE_FITS: "OFF"
    PION_TOOLS: "OFF"
    PION_SKIP_SOURCE: "OFF"
    PION_BUILD_DOCUMENTATION: "OFF"
    PION_BUILD_TESTS: "OFF"

.default_job: &default_job
  tags:
    - docker
  variables:
    <<: *default_cmake_variables
  script:
    - *configure
    - *build

stages:
  - static analysis
  - build libraries
  - build executables
  - test
  - documentation

Format:
  <<: *default_job
  image: debian:11-slim
  stage: static analysis
  variables:
    <<: *default_cmake_variables
    CXX: clang++
  before_script:
    - apt-get update -y
    - apt-get install --no-install-recommends -y
      git
      clang
      clang-format
      python3-yapf
      yapf3
      curl
      libcurl4-nss-dev
  script:
    - ./tools/run_format.sh
      && git status
      && git diff-index --quiet HEAD
      || { echo "This commit contains unformatted files! Run tools/run_format.sh on the project to format them correctly."; false; }


Serial:
  <<: *default_job
  stage: build libraries
  variables:
    <<: *default_cmake_variables
    PION_PARALLEL: "OFF"
    PION_USE_FITS: "ON"
  artifacts:
    name: serial 
    paths:
    #  - "${CMAKE_BUILD_DIR}"


Parallel:
  <<: *default_job
  stage: build libraries
  variables:
    <<: *default_cmake_variables
    CXX: mpicxx
    PION_PARALLEL: "ON"
    PION_USE_SILO: "ON"
  artifacts:
    name: parallel
    paths:
    #  - "${CMAKE_BUILD_DIR}"


Uniform_serial:
  <<: *default_job
  stage: build executables
  variables:
    <<: *default_cmake_variables
    PION_UNIFORM_GRID: "ON"
    PION_PARALLEL: "OFF"
    PION_USE_FITS: "ON"
  artifacts:
    name: uniform_serial 
    paths:
    #  - "${CMAKE_BUILD_DIR}"
  dependencies:
    - Serial


Nested_serial:
  <<: *default_job
  stage: build executables
  variables:
    <<: *default_cmake_variables
    PION_NESTED_GRID: "ON"
    PION_PARALLEL: "OFF"
    PION_USE_FITS: "ON"
  artifacts:
    name: nested_serial 
    paths:
    #  - "${CMAKE_BUILD_DIR}"
  dependencies:
    - Serial


Uniform_parallel:
  <<: *default_job
  stage: build executables
  variables:
    <<: *default_cmake_variables
    CXX: mpicxx
    PION_UNIFORM_GRID: "ON"
    PION_PARALLEL: "ON"
    PION_USE_SILO: "ON"
  artifacts:
    name: uniform_parallel 
    paths:
    #  - "${CMAKE_BUILD_DIR}"
  dependencies:
    - Parallel


Nested_parallel:
  <<: *default_job
  stage: build executables
  variables:
    <<: *default_cmake_variables
    CXX: mpicxx
    PION_NESTED_GRID: "ON"
    PION_PARALLEL: "ON"
    PION_USE_SILO: "ON"
  artifacts:
    name: nested_parallel
    paths:
    #  - "${CMAKE_BUILD_DIR}"
  dependencies:
    - Parallel


Uniform_test:
  <<: *default_job
  stage: test 
  variables:
    <<: *default_cmake_variables
    CXX: mpicxx
    PION_UNIFORM_GRID: "ON"
    PION_PARALLEL: "ON"
    PION_USE_SILO: "ON"
    PION_BUILD_TESTS: "ON"
    PION_TOOLS: "ON"
  script:
    - *configure
    - *build
    - make -C "${CMAKE_BUILD_DIR}" test-uniform 
  dependencies:
    - Uniform_parallel 
  artifacts:
    name: uniform_test 
    paths:
    #  - "${CMAKE_BUILD_DIR}"


Nested_test:
  <<: *default_job
  stage: test 
  variables:
    <<: *default_cmake_variables
    CXX: mpicxx
    PION_NESTED_GRID: "ON"
    PION_PARALLEL: "ON"
    PION_USE_SILO: "ON"
    PION_BUILD_TESTS: "ON"
    PION_TOOLS: "ON"
  script:
    - *configure
    - *build
    - make -C "${CMAKE_BUILD_DIR}" test-nested 
  dependencies:
    - Nested_parallel 
  artifacts:
    name: nested_test 
    paths:
    #  - "${CMAKE_BUILD_DIR}"


Pbc_test:
  <<: *default_job
  stage: test 
  variables:
    <<: *default_cmake_variables
    CXX: mpicxx
    PION_UNIFORM_GRID: "ON"
    PION_PARALLEL: "ON"
    PION_USE_SILO: "ON"
    PION_BUILD_TESTS: "ON"
    PION_TOOLS: "ON"
  script:
    - *configure
    - *build
    - make -C "${CMAKE_BUILD_DIR}" test-pbc 
  dependencies:
    - Uniform_parallel 
  artifacts:
    name: pbc_test 
    paths:
    #  - "${CMAKE_BUILD_DIR}"


3d_test:
  <<: *default_job
  stage: test 
  variables:
    <<: *default_cmake_variables
    CXX: mpicxx
    PION_UNIFORM_GRID: "ON"
    PION_PARALLEL: "ON"
    PION_USE_SILO: "ON"
    PION_BUILD_TESTS: "ON"
    PION_TOOLS: "ON"
  script:
    - *configure
    - *build
    - make -C "${CMAKE_BUILD_DIR}" test-3d-uniform 
  dependencies:
    - Uniform_parallel 
  artifacts:
    name: 3d_test 
    paths:
    #  - "${CMAKE_BUILD_DIR}"


3d_pbc_test:
  <<: *default_job
  stage: test 
  variables:
    <<: *default_cmake_variables
    CXX: mpicxx
    PION_UNIFORM_GRID: "ON"
    PION_PARALLEL: "ON"
    PION_USE_SILO: "ON"
    PION_BUILD_TESTS: "ON"
    PION_TOOLS: "ON"
  script:
    - *configure
    - *build
    - make -C "${CMAKE_BUILD_DIR}" test-3d-uniform-pbc
  dependencies:
    - Uniform_parallel 
  only:
    refs:
      - devel

3d_nested_test:
  <<: *default_job
  stage: test 
  variables:
    <<: *default_cmake_variables
    CXX: mpicxx
    PION_NESTED_GRID: "ON"
    PION_PARALLEL: "ON"
    PION_USE_SILO: "ON"
    PION_BUILD_TESTS: "ON"
    PION_TOOLS: "ON"
  script:
    - *configure
    - *build
    - make -C "${CMAKE_BUILD_DIR}" test-3d-nested
  dependencies:
    - Nested_parallel 
  only:
    refs:
      - devel


3d_nested_pbc_test:
  <<: *default_job
  stage: test 
  variables:
    <<: *default_cmake_variables
    CXX: mpicxx
    PION_NESTED_GRID: "ON"
    PION_PARALLEL: "ON"
    PION_USE_SILO: "ON"
    PION_BUILD_TESTS: "ON"
    PION_TOOLS: "ON"
  script:
    - *configure
    - *build
    - make -C "${CMAKE_BUILD_DIR}" test-3d-nested-pbc
  dependencies:
    - Nested_parallel 
  only:
    refs:
      - devel


Documentation:
  <<: *default_job
  stage: documentation 
  variables:
    <<: *default_cmake_variables
    PION_SKIP_SOURCE: "ON"
    PION_BUILD_DOCUMENTATION: "ON"
  before_script:
    - apt-get update -y
    - apt-get install --no-install-recommends -y 
      doxygen
      graphviz
      texlive
  script:
    - *configure
    - *build
    - *doc
  dependencies: []
