#
# Makefile for RadShockPosn code, Jonathan Mackey
#
# 2009-12-17 JM:
#  Wrote file; works for epona only.
#
# 2010.10.13 JM: Updated for new code!
# 2011.04.14 JM: Same again!
#
SHELL = /bin/sh
.SUFFIXES:
.SUFFIXES: .cc .o
srcdir = .

# --------------------
# Compile-time options
# --------------------
# Tell it that we're using serial code.
OPTION  = -DSERIAL
# if using Silo
OPTION += -DSILO
# if using FITS
OPTION += -DFITS

MAKE_UNAME=standard
#MAKE_UNAME=epona

# All machines and options need readline and maths
LDFLAGS = -lreadline
# display all warnings
CXXFLAGS = -O3 
#CXXFLAGS += -Wall

######################################################################
# Options for a "standard" workstation.
# make sure cfitsio and silo are compiled in ../extra_libraries/
######################################################################
ifeq ($(MAKE_UNAME), standard)
CXX = g++
CXXFLAGS = -O3
#CXXFLAGS = -O3 -g
#CXXFLAGS = -O0 -Wall -g

MYLIB = ../../extra_libraries
# Includes for FITS/SILO/CVODES
INC = -I${MYLIB}/include

LDFLAGS =  -lm  -lreadline
# All libraries are in this path:
LDFLAGS += -L${MYLIB}/lib
# Libraries for fits, silo
LDFLAGS += -lcfitsio
LDFLAGS += -lsilo 

endif



##################################################
##################################################

CXXFLAGS += $(OPTION)
VPATH = \
../../source:\
../../source/ics:\
../../source/Riemann_solvers:\
../../source/defines:\
../../source/microphysics:\
../../source/raytracing:\
../../source/microphysics/Harpreets_code:\
../../source/grid:\
../../source/dataIO:\
../../source/comms:\
../../source/coord_sys:\
../../source/equations:\
../../source/flux_calc:\
../../source/spatial_solvers:\
../../source/time_integrators

OBJECTS = RadShockPosn.o uniform_grid.o dataio.o readparams.o global.o \
	dataio_silo.o dataio_fits.o utility_fits_class.o \
	VectorOps.o VectorOps_spherical.o \
        stellar_wind_BC.o cell_interface.o

RadShockPosn: $(OBJECTS)
	$(CXX) $(CXXFLAGS) $(INC) $(OBJECTS) -o RadShockPosn $(LDFLAGS)

# make has rules for making objects from .cc files, so I don't need them
# explicitly, unless I am doing something unusual.
.cc.o:
	$(CXX) $(CXXFLAGS) $(INC) -c $<

RadShockPosn.o:	RadShockPosn.cc global.h uniform_grid.h dataio.h dataio_silo.h dataio_fits.h
global.o: 	global.cc global.h
uniform_grid.o: 	uniform_grid.cc uniform_grid.h global.h
dataio.o:       dataio.cc dataio.h global.h solver_eqn_base.h readparams.h
dataio_silo.o:  dataio_silo.cc dataio_silo.h dataio.h global.h solver_eqn_base.h
dataio_fits.o:  dataio_fits.cc dataio_fits.h dataio.h global.h solver_eqn_base.h 
readparams.o:   readparams.cc readparams.h global.h
utility_fits_class.o: utility_fits_class.cc dataio_fits.h dataio.h global.h

stellar_wind_BC.o: stellar_wind_BC.cc stellar_wind_BC.h global.h
cell_interface.o: cell_interface.cc cell_interface.h ${GLOBAL}
VectorOps.o:           VectorOps.cc VectorOps.h ${GLOBAL} uniform_grid.h
VectorOps_spherical.o: VectorOps_spherical.cc VectorOps_spherical.h VectorOps.h \
		       ${GLOBAL} uniform_grid.h

clean:
	rm -f *.o RadShockPosn

