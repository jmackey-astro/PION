# Makefile for twoD2oneD_shocktubes code, Jonathan Mackey
#
# 2010.12.07 JM: Added geometric grid support, and also cell_interface object.

SHELL = /bin/sh
.SUFFIXES:
.SUFFIXES: .cc .o
srcdir = .

# --------------------
# Compile-time options
# --------------------
# Tell it that we're using serial code.
OPTION  = -DSERIAL
# if using Silo
OPTION += -DSILO
# if using FITS
OPTION += -DFITS

MAKE_UNAME=standard
#MAKE_UNAME=aibn129
#MAKE_UNAME=epona
#MAKE_UNAME=stokes

# All machines and options need readline and maths
LDFLAGS = -lreadline
# display all warnings
CXXFLAGS = -O3 
#CXXFLAGS += -Wall

######################################################################
# Options for a "standard" workstation.
# make sure cfitsio and silo are compiled in ../extra_libraries/
######################################################################
ifeq ($(MAKE_UNAME), standard)
CXX = g++
CXXFLAGS = -O3
#CXXFLAGS = -O3 -g
#CXXFLAGS = -O0 -Wall -g

MYLIB = ../../../extra_libraries
# Includes for FITS/SILO/CVODES
INC = -I${MYLIB}/include

LDFLAGS =  -lm  
LDFLAGS +=-lreadline
#LDFLAGS += -lncurses

# All libraries are in this path:
LDFLAGS += -L${MYLIB}/lib
# Libraries for fits, silo
LDFLAGS += -lcfitsio
LDFLAGS += -lsilo 
# libs for CVODES
LDFLAGS +=-Wl,--rpath -Wl,${MYLIB}/lib -lsundials_cvode -lsundials_nvecserial
#LDFLAGS += -llapack -lblas

endif

###########################################
# Options for aibn129.uni-bonn.de (Ubuntu 10.04 64 bit)
###########################################
ifeq ($(MAKE_UNAME), aibn129)
CXX = g++
#CXXFLAGS = -O3
CXXFLAGS = -Wall -g

MYLIB = /export/aibn129_1/jmackey/extra_libraries

# Includes for FITS/SILO
INC = -I${MYLIB}/cfitsio_gcc/include
# for Silo, which may or may not use HDF5... (comment as appropriate)
#INC += -I${MYLIB}/hdf5/1.8.4/linux-i686_gcc-4.4/include
#INC += -I/usr/include
#INC += -fomit-frame-pointer
#INC += -I${MYLIB}/silo_gcc_nohdf/include
INC += -I${MYLIB}/silo_gcc_hdf5/include

LDFLAGS =  -lm  -lreadline

## If we want static linking this is the flag for it!
#LDFLAGS += -static
# Libraries for fits, silo (with hdf5, which uses szip)
LDFLAGS += -L${MYLIB}/cfitsio_gcc/lib -lcfitsio
LDFLAGS += -L${MYLIB}/silo_gcc_hdf5/lib  -lsiloh5 -lhdf5
#LDFLAGS += -L${MYLIB}/hdf5/1.8.4/linux-i686_gcc-4.4/lib -lhdf5
#LDFLAGS += -L${MYLIB}/szip/2.1/linux-i686_gcc-4.4/lib -lsz
LDFLAGS += -lz -lpthread
endif



##################################################
##################################################

CXXFLAGS += $(OPTION)
#VPATH = ../../../source
VPATH = \
../../../source:\
../../../source/ics:\
../../../source/Riemann_solvers:\
../../../source/defines:\
../../../source/microphysics:\
../../../source/raytracing:\
../../../source/microphysics/Harpreets_code:\
../../../source/grid:\
../../../source/dataIO:\
../../../source/comms:\
../../../source/coord_sys:\
../../../source/equations:\
../../../source/flux_calc:\
../../../source/spatial_solvers:\
../../../source/time_integrators

OBJECTS = twoD2oneD_shocktubes.o uniform_grid.o dataio.o readparams.o global.o \
	dataio_silo.o dataio_fits.o utility_fits_class.o \
	VectorOps.o VectorOps_spherical.o \
	stellar_wind_BC.o cell_interface.o

twoD2oneD_shocktubes: $(OBJECTS)
	$(CXX) $(CXXFLAGS) $(INC) $(OBJECTS) -o twoD2oneD_shocktubes $(LDFLAGS)

# make has rules for making objects from .cc files, so I don't need them
# explicitly, unless I am doing something unusual.
.cc.o:
	$(CXX) $(CXXFLAGS) $(INC) -c $<

twoD2oneD_shocktubes.o:	twoD2oneD_shocktubes.cc global.h uniform_grid.h dataio.h dataio_silo.h dataio_fits.h
global.o: 	global.cc global.h
uniform_grid.o: 	uniform_grid.cc uniform_grid.h global.h stellar_wind_BC.h \
		VectorOps.h VectorOps_spherical.h
dataio.o:       dataio.cc dataio.h global.h solver_eqn_base.h readparams.h
dataio_silo.o:  dataio_silo.cc dataio_silo.h dataio.h global.h solver_eqn_base.h
dataio_fits.o:  dataio_fits.cc dataio_fits.h dataio.h global.h solver_eqn_base.h solver_eqn_hydro_adi.h solver_eqn_hydro_iso.h
readparams.o:   readparams.cc readparams.h global.h
utility_fits_class.o: utility_fits_class.cc dataio_fits.h dataio.h global.h

stellar_wind_BC.o: stellar_wind_BC.cc stellar_wind_BC.h global.h
cell_interface.o: cell_interface.cc cell_interface.h global.h
VectorOps.o:           VectorOps.cc VectorOps.h global.h uniform_grid.h
VectorOps_spherical.o: VectorOps_spherical.cc VectorOps_spherical.h VectorOps.h \
		       global.h uniform_grid.h

clean:
	rm -f *.o twoD2oneD_shocktubes

